"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatehello_react_typescript"]("app",{

/***/ "./src/pages/UserPastEvents.tsx":
/*!**************************************!*\
  !*** ./src/pages/UserPastEvents.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nconst react_1 = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nconst react_router_dom_1 = __webpack_require__(/*! react-router-dom */ \"./node_modules/react-router-dom/dist/index.js\");\nconst UserPastEvents = () => {\n    const [events, setEvents] = (0, react_1.useState)([]);\n    const [loading, setLoading] = (0, react_1.useState)(true);\n    const navigate = (0, react_router_dom_1.useNavigate)();\n    (0, react_1.useEffect)(() => {\n        fetchUserEvents();\n    }, []);\n    const fetchUserEvents = async () => {\n        try {\n            const response = await fetch('/api/v1/User/GetUserEvents'); // Pas de endpoint aan indien nodig\n            if (response.ok) {\n                const data = await response.json();\n                console.log(data);\n                if (data && data.$values && Array.isArray(data.$values)) {\n                    setEvents(data.$values);\n                }\n                else {\n                    console.error('Error: API response is not in the expected format');\n                }\n            }\n            else {\n                console.error('Error fetching user events:', response.statusText);\n            }\n        }\n        catch (error) {\n            console.error('Error fetching user events:', error);\n        }\n        finally {\n            setLoading(false);\n        }\n    };\n    const handleRating = async (eventId, rating) => {\n        try {\n            const response = await fetch(`/api/v1/Event_Attendance/RateEvent`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ eventId, rating })\n            });\n            if (response.ok) {\n                alert('Rating succesvol opgeslagen!');\n                // Optioneel: update de lokale staat om de nieuwe rating weer te geven\n                setEvents(prevEvents => prevEvents.map(event => event.eventId === eventId ? { ...event, rating } : event));\n            }\n            else {\n                const errorText = await response.text();\n                alert('Fout bij het opslaan van de rating: ' + response.statusText + ' ' + response.status + ' ' + errorText);\n            }\n        }\n        catch (error) {\n            alert('Fout bij het opslaan van de rating: ' + error);\n        }\n    };\n    const viewAttendees = (id) => {\n        navigate(`/event/${id}/attendees`);\n    };\n    if (loading) {\n        return (0, jsx_runtime_1.jsx)(\"div\", { children: \"Loading...\" });\n    }\n    return ((0, jsx_runtime_1.jsxs)(\"div\", { children: [(0, jsx_runtime_1.jsx)(\"h1\", { children: \"User Dashboard\" }), (0, jsx_runtime_1.jsx)(\"h2\", { children: \"Mijn Evenementen\" }), (0, jsx_runtime_1.jsxs)(\"table\", { children: [(0, jsx_runtime_1.jsx)(\"thead\", { children: (0, jsx_runtime_1.jsxs)(\"tr\", { children: [(0, jsx_runtime_1.jsx)(\"th\", { children: \"Titel\" }), (0, jsx_runtime_1.jsx)(\"th\", { children: \"Beschrijving\" }), (0, jsx_runtime_1.jsx)(\"th\", { children: \"Locatie\" }), (0, jsx_runtime_1.jsx)(\"th\", { children: \"Datum\" }), (0, jsx_runtime_1.jsx)(\"th\", { children: \"Start Tijd\" }), (0, jsx_runtime_1.jsx)(\"th\", { children: \"Eind Tijd\" }), (0, jsx_runtime_1.jsx)(\"th\", { children: \"Rating\" }), (0, jsx_runtime_1.jsx)(\"th\", { children: \"Acties\" })] }) }), (0, jsx_runtime_1.jsx)(\"tbody\", { children: events.map(event => ((0, jsx_runtime_1.jsxs)(\"tr\", { children: [(0, jsx_runtime_1.jsx)(\"td\", { children: event.title }), (0, jsx_runtime_1.jsx)(\"td\", { children: event.description }), (0, jsx_runtime_1.jsx)(\"td\", { children: event.location }), (0, jsx_runtime_1.jsx)(\"td\", { children: new Date(event.eventDate).toLocaleDateString() }), (0, jsx_runtime_1.jsx)(\"td\", { children: event.startTime }), (0, jsx_runtime_1.jsx)(\"td\", { children: event.endTime }), (0, jsx_runtime_1.jsx)(\"td\", { children: event.rating ? ((0, jsx_runtime_1.jsxs)(\"span\", { children: ['★'.repeat(event.rating), '☆'.repeat(5 - event.rating)] })) : ('Geen rating') }), (0, jsx_runtime_1.jsxs)(\"td\", { children: [(0, jsx_runtime_1.jsx)(\"button\", { onClick: () => viewAttendees(event.eventId), children: \"View Attendees\" }), (0, jsx_runtime_1.jsxs)(\"div\", { style: { display: 'inline-block', position: 'relative' }, children: [(0, jsx_runtime_1.jsx)(\"button\", { children: \"Rate\" }), (0, jsx_runtime_1.jsx)(\"div\", { style: {\n                                                        position: 'absolute',\n                                                        top: '100%',\n                                                        left: 0,\n                                                        backgroundColor: 'white',\n                                                        border: '1px solid #ccc',\n                                                        padding: '5px',\n                                                        display: 'none',\n                                                        zIndex: 1\n                                                    }, className: \"dropdown-content\", children: [1, 2, 3, 4, 5].map(star => ((0, jsx_runtime_1.jsx)(\"button\", { onClick: () => handleRating(event.eventId, star), style: { background: 'none', border: 'none', cursor: 'pointer' }, children: '★'.repeat(star) }, star))) })] })] })] }, event.eventId))) })] })] }));\n};\nexports[\"default\"] = UserDashboard;\n\n\n//# sourceURL=webpack://hello-react-typescript/./src/pages/UserPastEvents.tsx?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("71d6976d5e4648d410ae")
/******/ })();
/******/ 
/******/ }
);