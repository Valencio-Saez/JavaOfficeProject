"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatehello_react_typescript"]("app",{

/***/ "./src/pages/EventDetailsHome.tsx":
/*!****************************************!*\
  !*** ./src/pages/EventDetailsHome.tsx ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nconst react_1 = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nconst react_router_dom_1 = __webpack_require__(/*! react-router-dom */ \"./node_modules/react-router-dom/dist/index.js\");\nconst AccessibilityOptions_1 = __importDefault(__webpack_require__(/*! ./AccessibilityOptions */ \"./src/pages/AccessibilityOptions.tsx\"));\nconst EventDetailsHome = () => {\n    const { eventId } = (0, react_router_dom_1.useParams)();\n    const [event, setEvent] = (0, react_1.useState)(null);\n    const [loading, setLoading] = (0, react_1.useState)(true);\n    const [error, setError] = (0, react_1.useState)(null);\n    const [isUserAttending, setIsUserAttending] = (0, react_1.useState)(false);\n    const [isAuthenticated, setIsAuthenticated] = (0, react_1.useState)(null);\n    const [review, setReview] = (0, react_1.useState)('');\n    const [reviews, setReviews] = (0, react_1.useState)([]);\n    const navigate = (0, react_router_dom_1.useNavigate)();\n    (0, react_1.useEffect)(() => {\n        checkUserLoggedIn();\n    }, []);\n    const checkUserLoggedIn = async () => {\n        try {\n            const response = await fetch('/api/v1/Login/IsUserLoggedIn', {\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\n                },\n            });\n            const data = await response.json();\n            setIsAuthenticated(data);\n            if (!data) {\n                navigate('/');\n            }\n            else {\n                if (eventId) {\n                    fetchEventDetails(eventId);\n                    checkUserAttendance(eventId);\n                }\n            }\n        }\n        catch (error) {\n            console.error('Error checking user login status:', error);\n            navigate('/');\n        }\n    };\n    const fetchEventDetails = async (id) => {\n        try {\n            console.log(`Fetching event details for ID: ${id}`);\n            const response = await fetch(`/api/v1/Event/${id}`, {\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\n                },\n            });\n            if (!response.ok) {\n                throw new Error('Failed to fetch event details');\n            }\n            const data = await response.json();\n            console.log('Event details response:', data);\n            setEvent(data);\n            setReviews(data.reviews || []); // Assuming reviews are part of the event data\n        }\n        catch (error) {\n            console.error('Error fetching event details:', error);\n            setError('Failed to fetch event details');\n        }\n        finally {\n            setLoading(false);\n        }\n    };\n    const checkUserAttendance = async (id) => {\n        try {\n            const response = await fetch(`/api/v1/Event/${id}/isUserAttending`, {\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\n                },\n            });\n            if (!response.ok) {\n                throw new Error('Failed to check user attendance');\n            }\n            const data = await response.json();\n            setIsUserAttending(data.isAttending);\n        }\n        catch (error) {\n            console.error('Error checking user attendance:', error);\n        }\n    };\n    const handleAttend = async () => {\n        try {\n            const response = await fetch('/api/v1/AttendanceModification/AddAttendance', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\n                },\n                body: JSON.stringify({\n                    eventId: parseInt(eventId),\n                }),\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || 'Failed to attend event');\n            }\n            const data = await response.json();\n            alert(`You are now attending the event. Welcome, ${data.UserName}!`);\n            setIsUserAttending(true);\n        }\n        catch (error) {\n            console.error('Error attending event:', error);\n            alert(error.message);\n        }\n    };\n    const handleDeleteAttendance = async () => {\n        try {\n            const response = await fetch(`/api/v1/Event/${eventId}/specifieke`, {\n                method: 'DELETE',\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\n                },\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(errorText || 'Failed to delete attendance');\n            }\n            alert('Attendance deleted successfully.');\n            setIsUserAttending(false);\n            navigate('/user');\n        }\n        catch (error) {\n            console.error('Error deleting attendance:', error);\n            alert(error.message);\n        }\n    };\n    const handleReviewSubmit = async () => {\n        if (!review.trim()) {\n            alert('Please write a review before submitting.');\n            return;\n        }\n        try {\n            // Check the eventId value\n            console.log('Submitting review for eventId:', eventId);\n            const response = await fetch(`/api/v1/Event/${eventId}/addReview`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\n                },\n                body: JSON.stringify({\n                    review,\n                }),\n            });\n            if (!response.ok) {\n                // Improved error handling\n                let errorMessage = 'Failed to submit review';\n                try {\n                    const errorData = await response.json();\n                    errorMessage = errorData.message || errorMessage;\n                }\n                catch (err) {\n                    console.error('Error parsing JSON response:', err);\n                }\n                throw new Error(errorMessage);\n            }\n            const data = await response.json();\n            console.log('Review submission response:', data); // Log the response data\n            alert('Review submitted successfully');\n            // Assuming the response includes the username and review text\n            setReviews((prevReviews) => [...prevReviews, { userName: data.userName, review: review }]);\n            // Clear the review input after submission\n            setReview('');\n        }\n        catch (error) {\n            console.error('Error submitting review:', error);\n            alert(error.message);\n        }\n    };\n    const goBack = () => {\n        navigate(-1);\n    };\n    if (isAuthenticated === null || loading) {\n        return (0, jsx_runtime_1.jsx)(\"div\", { children: \"Loading...\" });\n    }\n    if (error) {\n        return (0, jsx_runtime_1.jsx)(\"div\", { children: error });\n    }\n    if (!event) {\n        return (0, jsx_runtime_1.jsx)(\"div\", { children: \"No event found\" });\n    }\n    return ((0, jsx_runtime_1.jsxs)(\"div\", { children: [(0, jsx_runtime_1.jsx)(\"h1\", { children: event.title }), (0, jsx_runtime_1.jsxs)(\"p\", { children: [(0, jsx_runtime_1.jsx)(\"strong\", { children: \"Description:\" }), \" \", event.description] }), (0, jsx_runtime_1.jsxs)(\"p\", { children: [(0, jsx_runtime_1.jsx)(\"strong\", { children: \"Location:\" }), \" \", event.location] }), (0, jsx_runtime_1.jsxs)(\"p\", { children: [(0, jsx_runtime_1.jsx)(\"strong\", { children: \"Event Date:\" }), \" \", new Date(event.eventDate).toLocaleDateString()] }), (0, jsx_runtime_1.jsxs)(\"p\", { children: [(0, jsx_runtime_1.jsx)(\"strong\", { children: \"Start Time:\" }), \" \", event.startTime] }), (0, jsx_runtime_1.jsxs)(\"p\", { children: [(0, jsx_runtime_1.jsx)(\"strong\", { children: \"End Time:\" }), \" \", event.endTime] }), (0, jsx_runtime_1.jsxs)(\"div\", { style: { marginTop: '20px' }, children: [(0, jsx_runtime_1.jsx)(\"button\", { style: { marginRight: '30px' }, onClick: goBack, children: \"Go Back\" }), isUserAttending ? ((0, jsx_runtime_1.jsx)(\"button\", { onClick: handleDeleteAttendance, children: \"Delete Attendance\" })) : ((0, jsx_runtime_1.jsx)(\"button\", { onClick: handleAttend, children: \"Attend Event\" }))] }), (0, jsx_runtime_1.jsxs)(\"div\", { style: { marginTop: '30px' }, children: [(0, jsx_runtime_1.jsx)(\"h3\", { children: \"Write a Review\" }), (0, jsx_runtime_1.jsx)(\"textarea\", { value: review, onChange: (e) => setReview(e.target.value), placeholder: \"Write your review here...\", rows: 4, style: { width: '100%' } }), (0, jsx_runtime_1.jsx)(\"button\", { onClick: handleReviewSubmit, style: { marginTop: '10px' }, children: \"Submit Review\" })] }), (0, jsx_runtime_1.jsxs)(\"div\", { style: { marginTop: '30px' }, children: [(0, jsx_runtime_1.jsx)(\"h3\", { children: \"Reviews\" }), reviews.length > 0 ? (reviews.map((review, index) => ((0, jsx_runtime_1.jsxs)(\"div\", { style: { marginBottom: '10px' }, children: [(0, jsx_runtime_1.jsx)(\"p\", { children: (0, jsx_runtime_1.jsxs)(\"strong\", { children: [review.userName, \":\"] }) }), (0, jsx_runtime_1.jsx)(\"p\", { children: review.review })] }, index)))) : ((0, jsx_runtime_1.jsx)(\"p\", { children: \"No reviews yet.\" }))] }), (0, jsx_runtime_1.jsx)(AccessibilityOptions_1.default, {})] }));\n};\nexports[\"default\"] = EventDetailsHome;\n\n\n//# sourceURL=webpack://hello-react-typescript/./src/pages/EventDetailsHome.tsx?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("e1113207200a73c324d7")
/******/ })();
/******/ 
/******/ }
);