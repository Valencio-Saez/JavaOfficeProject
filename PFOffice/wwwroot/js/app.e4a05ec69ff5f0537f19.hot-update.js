"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatehello_react_typescript"]("app",{

/***/ "./src/pages/AdminEditEvent.tsx":
/*!**************************************!*\
  !*** ./src/pages/AdminEditEvent.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nconst react_1 = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nconst react_router_dom_1 = __webpack_require__(/*! react-router-dom */ \"./node_modules/react-router-dom/dist/index.js\");\nconst AccessibilityOptions_1 = __importDefault(__webpack_require__(/*! ./AccessibilityOptions */ \"./src/pages/AccessibilityOptions.tsx\"));\nconst EventContext_1 = __webpack_require__(/*! ../EventContext */ \"./src/EventContext.tsx\");\nconst AdminEditEvent = () => {\n    const { eventId } = (0, react_router_dom_1.useParams)();\n    const { event, setEvent } = (0, EventContext_1.useEvent)();\n    const navigate = (0, react_router_dom_1.useNavigate)();\n    const [originalEvent, setOriginalEvent] = (0, react_1.useState)({\n        eventId: 0,\n        title: '',\n        description: '',\n        eventDate: '',\n        startTime: '',\n        endTime: '',\n        location: ''\n    });\n    (0, react_1.useEffect)(() => {\n        if (eventId && event.eventId !== Number(eventId)) {\n            fetchEvent();\n        }\n        // return () => {\n        //   setEvent({\n        //     eventId: 0,\n        //     title: '',\n        //     description: '',\n        //     location: '',\n        //     eventDate: '',\n        //     startTime: '',\n        //     endTime: ''\n        //   });\n        // };\n    }, [eventId]);\n    const fetchEvent = async () => {\n        try {\n            const response = await fetch(`/api/v1/Event/GetEvent/${eventId}`);\n            if (response.ok) {\n                const contentType = response.headers.get(\"content-type\");\n                if (contentType && contentType.indexOf(\"application/json\") !== -1) {\n                    const data = await response.json();\n                    setEvent(data);\n                    setOriginalEvent(data);\n                }\n                else {\n                    const text = await response.text();\n                    console.error('Error fetching event:', text);\n                }\n            }\n            else {\n                console.error('Error fetching event:', response.statusText);\n            }\n        }\n        catch (error) {\n            console.error('Error fetching event:', error);\n        }\n    };\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setEvent({ ...event, [name]: value });\n    };\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await fetch(`/api/v1/Event/UpdateEvent/${eventId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(event)\n            });\n            if (response.ok) {\n                alert('Event updated successfully!');\n                navigate('/admin');\n            }\n            else {\n                const errorText = await response.text();\n                alert('Error updating event: ' + response.statusText + ' ' + response.status + ' ' + errorText);\n            }\n        }\n        catch (error) {\n            alert('Error updating event: ' + error);\n        }\n    };\n    return ((0, jsx_runtime_1.jsxs)(\"div\", { children: [(0, jsx_runtime_1.jsx)(\"h1\", { children: \"Admin Dashboard\" }), (0, jsx_runtime_1.jsx)(\"h2\", { children: \"Edit Event\" }), (0, jsx_runtime_1.jsxs)(\"form\", { onSubmit: handleSubmit, children: [(0, jsx_runtime_1.jsxs)(\"div\", { className: \"form-group\", children: [(0, jsx_runtime_1.jsx)(\"label\", { htmlFor: \"title\", className: \"bold-label\", children: \"Title:\" }), (0, jsx_runtime_1.jsx)(\"span\", { className: \"light-grey-text\", children: originalEvent.title }), (0, jsx_runtime_1.jsx)(\"input\", { type: \"text\", id: \"title\", name: \"title\", value: event.title, onChange: handleInputChange, required: true })] }), (0, jsx_runtime_1.jsxs)(\"div\", { className: \"form-group\", children: [(0, jsx_runtime_1.jsx)(\"label\", { htmlFor: \"description\", className: \"bold-label\", children: \"Description:\" }), (0, jsx_runtime_1.jsx)(\"span\", { className: \"light-grey-text\", children: originalEvent.description }), (0, jsx_runtime_1.jsx)(\"input\", { type: \"text\", id: \"description\", name: \"description\", value: event.description, onChange: handleInputChange, required: true })] }), (0, jsx_runtime_1.jsxs)(\"div\", { className: \"form-group\", children: [(0, jsx_runtime_1.jsx)(\"label\", { htmlFor: \"eventDate\", className: \"bold-label\", children: \"Event Date:\" }), (0, jsx_runtime_1.jsx)(\"span\", { className: \"light-grey-text\", children: originalEvent.eventDate }), (0, jsx_runtime_1.jsx)(\"input\", { type: \"text\", id: \"eventDate\", name: \"eventDate\", value: event.eventDate, onChange: handleInputChange, required: true })] }), (0, jsx_runtime_1.jsxs)(\"div\", { className: \"form-group\", children: [(0, jsx_runtime_1.jsx)(\"label\", { htmlFor: \"startTime\", className: \"bold-label\", children: \"Start Time:\" }), (0, jsx_runtime_1.jsx)(\"span\", { className: \"light-grey-text\", children: originalEvent.startTime }), (0, jsx_runtime_1.jsx)(\"input\", { type: \"text\", id: \"startTime\", name: \"startTime\", value: event.startTime, onChange: handleInputChange, required: true })] }), (0, jsx_runtime_1.jsxs)(\"div\", { className: \"form-group\", children: [(0, jsx_runtime_1.jsx)(\"label\", { htmlFor: \"endTime\", className: \"bold-label\", children: \"End Time:\" }), (0, jsx_runtime_1.jsx)(\"span\", { className: \"light-grey-text\", children: originalEvent.endTime }), (0, jsx_runtime_1.jsx)(\"input\", { type: \"text\", id: \"endTime\", name: \"endTime\", value: event.endTime, onChange: handleInputChange, required: true })] }), (0, jsx_runtime_1.jsxs)(\"div\", { className: \"form-group\", children: [(0, jsx_runtime_1.jsx)(\"label\", { htmlFor: \"location\", className: \"bold-label\", children: \"Location:\" }), (0, jsx_runtime_1.jsx)(\"span\", { className: \"light-grey-text\", children: originalEvent.location }), (0, jsx_runtime_1.jsx)(\"input\", { type: \"text\", id: \"location\", name: \"location\", value: event.location, onChange: handleInputChange, required: true })] }), (0, jsx_runtime_1.jsx)(\"button\", { type: \"submit\", className: \"btn btn-primary\", children: \"Update Event\" }), (0, jsx_runtime_1.jsx)(\"button\", { type: \"button\", className: \"btn btn-secondary\", onClick: () => navigate('/admin'), children: \"Back\" })] }), (0, jsx_runtime_1.jsx)(AccessibilityOptions_1.default, {})] }));\n};\nexports[\"default\"] = AdminEditEvent;\n\n\n//# sourceURL=webpack://hello-react-typescript/./src/pages/AdminEditEvent.tsx?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("6680939da92d832bac07")
/******/ })();
/******/ 
/******/ }
);